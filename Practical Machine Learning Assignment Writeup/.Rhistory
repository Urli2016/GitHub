diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(caret)
library(randomForest)
library(lattice)
library(ggplot2)
# Chunk 3
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv",  na.strings = c("NA", "#DIV/0!", ""))
# Chunk 4
str(training, list.len=15)
# Chunk 5
table(training$classe)
# Chunk 6
prop.table(table(training$user_name, training$classe), 1)
# Chunk 7
prop.table(table(training$classe))
# Chunk 8
training <- training[, 7:160]
testing  <- testing[, 7:160]
# Chunk 9
is_data  <- apply(!is.na(training), 2, sum) > 19621  # which is the number of observations
training <- training[, is_data]
testing  <- testing[, is_data]
# Chunk 10
library(caret)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe, p=0.60, list=FALSE)
train1  <- training[inTrain,]
train2  <- training[-inTrain,]
dim(train1)
# Chunk 11
dim(train2)
# Chunk 12
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
# Chunk 13
dim(train2)
# Chunk 14
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
# Chunk 15
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 18
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(caret)
library(randomForest)
library(lattice)
library(ggplot2)
# Chunk 3
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv",  na.strings = c("NA", "#DIV/0!", ""))
# Chunk 4
str(training, list.len=15)
# Chunk 5
table(training$classe)
# Chunk 6
prop.table(table(training$user_name, training$classe), 1)
# Chunk 7
prop.table(table(training$classe))
# Chunk 8
training <- training[, 7:160]
testing  <- testing[, 7:160]
# Chunk 9
is_data  <- apply(!is.na(training), 2, sum) > 19621  # which is the number of observations
training <- training[, is_data]
testing  <- testing[, is_data]
# Chunk 10
library(caret)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe, p=0.60, list=FALSE)
train1  <- training[inTrain,]
train2  <- training[-inTrain,]
dim(train1)
# Chunk 11
dim(train2)
# Chunk 12
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
# Chunk 13
dim(train2)
# Chunk 14
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
# Chunk 15
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 18
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
# Chunk 19
set.seed(3141592)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
# Chunk 20
predictions <- predict(fitModel, newdata=train2)
confusionMat <- confusionMatrix(predictions, train2$classe)
confusionMat
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(caret)
library(randomForest)
library(lattice)
library(ggplot2)
# Chunk 3
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv",  na.strings = c("NA", "#DIV/0!", ""))
# Chunk 4
str(training, list.len=15)
# Chunk 5
table(training$classe)
# Chunk 6
prop.table(table(training$user_name, training$classe), 1)
# Chunk 7
prop.table(table(training$classe))
# Chunk 8
training <- training[, 7:160]
testing  <- testing[, 7:160]
# Chunk 9
is_data  <- apply(!is.na(training), 2, sum) > 19621  # which is the number of observations
training <- training[, is_data]
testing  <- testing[, is_data]
# Chunk 10
library(caret)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe, p=0.60, list=FALSE)
train1  <- training[inTrain,]
train2  <- training[-inTrain,]
dim(train1)
# Chunk 11
dim(train2)
# Chunk 12
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
# Chunk 13
dim(train2)
# Chunk 14
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
# Chunk 15
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 18
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
# Chunk 19
set.seed(3141592)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
# Chunk 20
predictions <- predict(fitModel, newdata=train2)
confusionMat <- confusionMatrix(predictions, train2$classe)
confusionMat
# Chunk 21
missClass = function(values, predicted) {
sum(predicted != values) / length(values)
}
OOS_errRate = missClass(train2$classe, predictions)
OOS_errRate
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(caret)
library(randomForest)
library(lattice)
library(ggplot2)
# Chunk 3
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv",  na.strings = c("NA", "#DIV/0!", ""))
# Chunk 4
str(training, list.len=15)
# Chunk 5
table(training$classe)
# Chunk 6
prop.table(table(training$user_name, training$classe), 1)
# Chunk 7
prop.table(table(training$classe))
# Chunk 8
training <- training[, 7:160]
testing  <- testing[, 7:160]
# Chunk 9
is_data  <- apply(!is.na(training), 2, sum) > 19621  # which is the number of observations
training <- training[, is_data]
testing  <- testing[, is_data]
# Chunk 10
library(caret)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe, p=0.60, list=FALSE)
train1  <- training[inTrain,]
train2  <- training[-inTrain,]
dim(train1)
# Chunk 11
dim(train2)
# Chunk 12
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
# Chunk 13
dim(train2)
# Chunk 14
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
# Chunk 15
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 18
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
# Chunk 19
set.seed(3141592)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
# Chunk 20
predictions <- predict(fitModel, newdata=train2)
confusionMat <- confusionMatrix(predictions, train2$classe)
confusionMat
# Chunk 21
missClass = function(values, predicted) {
sum(predicted != values) / length(values)
}
OOS_errRate = missClass(train2$classe, predictions)
OOS_errRate
# Chunk 22
predictions <- predict(fitModel, newdata=testing)
testing$classe <- predictions
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(caret)
library(randomForest)
library(lattice)
library(ggplot2)
# Chunk 3
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv",  na.strings = c("NA", "#DIV/0!", ""))
# Chunk 4
str(training, list.len=15)
# Chunk 5
table(training$classe)
# Chunk 6
prop.table(table(training$user_name, training$classe), 1)
# Chunk 7
prop.table(table(training$classe))
# Chunk 8
training <- training[, 7:160]
testing  <- testing[, 7:160]
# Chunk 9
is_data  <- apply(!is.na(training), 2, sum) > 19621  # which is the number of observations
training <- training[, is_data]
testing  <- testing[, is_data]
# Chunk 10
library(caret)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe, p=0.60, list=FALSE)
train1  <- training[inTrain,]
train2  <- training[-inTrain,]
dim(train1)
# Chunk 11
dim(train2)
# Chunk 12
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
# Chunk 13
dim(train2)
# Chunk 14
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
# Chunk 15
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 18
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
# Chunk 19
set.seed(3141592)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
# Chunk 20
predictions <- predict(fitModel, newdata=train2)
confusionMat <- confusionMatrix(predictions, train2$classe)
confusionMat
# Chunk 21
missClass = function(values, predicted) {
sum(predicted != values) / length(values)
}
OOS_errRate = missClass(train2$classe, predictions)
OOS_errRate
# Chunk 22
predictions <- predict(fitModel, newdata=testing)
testing$classe <- predictions
# Chunk 23
submit <- data.frame(problem_id = testing$problem_id, classe = predictions)
write.csv(submit, file = "coursera-submission.csv", row.names = FALSE)
# Chunk 24
answers = testing$classe
write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
write_files(answers)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(caret)
library(randomForest)
library(lattice)
library(ggplot2)
# Chunk 3
training <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
testing  <- read.csv("pml-testing.csv",  na.strings = c("NA", "#DIV/0!", ""))
# Chunk 4
str(training, list.len=15)
# Chunk 5
table(training$classe)
# Chunk 6
prop.table(table(training$user_name, training$classe), 1)
# Chunk 7
prop.table(table(training$classe))
# Chunk 8
training <- training[, 7:160]
testing  <- testing[, 7:160]
# Chunk 9
is_data  <- apply(!is.na(training), 2, sum) > 19621  # which is the number of observations
training <- training[, is_data]
testing  <- testing[, is_data]
# Chunk 10
library(caret)
set.seed(3141592)
inTrain <- createDataPartition(y=training$classe, p=0.60, list=FALSE)
train1  <- training[inTrain,]
train2  <- training[-inTrain,]
dim(train1)
# Chunk 11
dim(train2)
# Chunk 12
nzv_cols <- nearZeroVar(train1)
if(length(nzv_cols) > 0) {
train1 <- train1[, -nzv_cols]
train2 <- train2[, -nzv_cols]
}
dim(train1)
# Chunk 13
dim(train2)
# Chunk 14
library(randomForest)
set.seed(3141592)
fitModel <- randomForest(classe~., data=train1, importance=TRUE, ntree=100)
varImpPlot(fitModel)
# Chunk 15
correl = cor(train1[,c("yaw_belt","roll_belt","num_window","pitch_belt","magnet_dumbbell_z","magnet_dumbbell_y","pitch_forearm","accel_dumbbell_y","roll_arm","roll_forearm")])
diag(correl) <- 0
which(abs(correl)>0.75, arr.ind=TRUE)
# Chunk 16
cor(train1$roll_belt, train1$yaw_belt)
# Chunk 17
qplot(roll_belt, magnet_dumbbell_y, colour=classe, data=train1)
# Chunk 18
library(rpart.plot)
fitModel <- rpart(classe~., data=train1, method="class")
prp(fitModel)
# Chunk 19
set.seed(3141592)
fitModel <- train(classe~roll_belt+num_window+pitch_belt+magnet_dumbbell_y+magnet_dumbbell_z+pitch_forearm+accel_dumbbell_y+roll_arm+roll_forearm,
data=train1,
method="rf",
trControl=trainControl(method="cv",number=2),
prox=TRUE,
verbose=TRUE,
allowParallel=TRUE)
# Chunk 20
predictions <- predict(fitModel, newdata=train2)
confusionMat <- confusionMatrix(predictions, train2$classe)
confusionMat
# Chunk 21
missClass = function(values, predicted) {
sum(predicted != values) / length(values)
}
OOS_errRate = missClass(train2$classe, predictions)
OOS_errRate
# Chunk 22
predictions <- predict(fitModel, newdata=testing)
testing$classe <- predictions
# Chunk 23
submit <- data.frame(problem_id = testing$problem_id, classe = predictions)
write.csv(submit, file = "coursera-submission.csv", row.names = FALSE)
# Chunk 24
answers = testing$classe
write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_",i,".txt")
write.table(x[i], file=filename, quote=FALSE, row.names=FALSE, col.names=FALSE)
}
}
write_files(answers)
# Chunk 25
preProc <- preProcess(train1[, -which(names(train1) == "classe")],
method = "pca",
thresh = 0.75)
output <- preProc$rotation
# Chunk 26
set.seed(3141592)
fit <- train(classe ~ .,
data = train1,
method = "rf",
preProcess = "pca",
trControl = trainControl(method="cv", number=2, preProcOptions=list(thresh=0.75)),
prox = TRUE,
verbose = TRUE,
allowParallel = TRUE)
# Chunk 27
trControl=trainControl(preProcOptions=list(thresh=0.75))
View(testing)
View(testing)
View(testing)
View(testing)
View(testing)
